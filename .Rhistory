y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
dfbeta(fit)
hatvalues(fit5)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(fit)
fit <- lm(y~x)
hatvalues(fit)
dfbeta(fit)
influence.measures(fit)
permillion<-.08
minutesinayear<-365*24*60
minutesinayear/10^6
minutesinayear<-365*24*60*10^-6
minutesinayear
permillion*minutesinayear
costperdevice<-permillion*minutesinayear
costperdevice
#assuming a message every second
messagesinayear<-365*24*60*60*10^-6
messagesinayear
permillion<-1
#assuming a message every second
messagesinayear<-365*24*60*60*10^-6
costperdevice<-permillion*minutesinayear
costperdevice
365*24*60*60
365*24*60*60*10^-6
permillion<-1
#assuming a message every second
messagesinayear<-365*24*60*60*10^-6
costperdevice<-permillion*messagesinayear
costperdevice
#dollar to rupees = 70
#connectivity
permillion<-.08
minutesinayear<-365*24*60*10^-6
costperdevice<-permillion*minutesinayear
costperdevice
#dollar to rupees = 70
rupeesperdollar<-70
costperdevice*rupeesperdollar
costperdevice*rupeesperdollar
permillion<-1
#assuming a message every second
messagesinayear<-365*24*60*60*10^-6
costperdevice<-permillion*messagesinayear
costperdevice
31.53
costperdevice*rupeesperdollar
permillion<-0.15+0.15*actionsexecutedperrule
messagesinayear
#assuming a message every second
messagesinayear<-365*24*60*60*10^-6
messagesinayear
rulesexecuted<-messagesinayear*actionsexecutedperrule
rulesapplied<-messagesinayear
rulesexecuted<-messagesinayear*actionsexecutedperrule
#Rules Engine
actionsexecutedperrule<-1
permillion<-0.15
#assuming a message every second
messagesinayear<-365*24*60*60*10^-6
rulesapplied<-messagesinayear
rulesexecuted<-messagesinayear*actionsexecutedperrule
rulesapplied+rulesexecuted
totalrules<-rulesapplied+rulesexecuted
costperdevice<-permillion*totalrules
costperdevice
costperdevice*rupeesperdollar
#Device Shadow & Registry Updates
permillion<-1.25
messagesinayear<-365*24*60*60*10^-6
costperdevice<-permillion*messagesinayear
costperdevice
costperdevice*rupeesperdollar
2759
c(2.94336,2208,662.256,2759)
sum(c(2.94336,2208,662.256,2759))
library(swirl)
swirl()
rpg1()
rgp1()
dev.off()
rgp2()
head(swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl<-lm(Fertility~.,swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
swirl()
simbias()
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-deviance(fit1)-deviance(fit3)
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore,family,ravenData)
mdl<-glm(ravenWinNum~ravenScore,family,ravenData)
mdl<-glm(ravenWinNum~ravenScore,ravenData)
mdl<-glm(ravenWinNum~ravenScore,family="binomial",ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchi(0.95,1)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
confint(mdl,'date')
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-glm(visits~date,poisson,offset=log(visits+1),hits)
mdl2<-glm(simplystats~date,poisson,offset=log(visits+1),hits)
qpois(0.95,mdl2$fitted.values[704])
library(MASS)
library(dplyr)
head(shuttle)
shuttle$autoland<-shuttle$use=="auto"
head(shuttle)
shuttle$autoland<-as.numeric(shuttle$use=="auto")
shuttle
head(shuttle)
shuttle[shuttle$autoland==1]
shuttle[shuttle$autoland==1,]
shuttle[shuttle$autoland==1 &shuttle$wind=="head"]
shuttle[shuttle$autoland==1 &shuttle$wind=="head",]
nrow(shuttle[shuttle$autoland==1 &shuttle$wind=="head",])
nrow(shuttle[shuttle$autoland==1 &shuttle$wind=="tail",])
fit<-glm(usebin~factor(wind)-1,family="binomial",data=shuttle)
fit<-glm(autoland~factor(wind)-1,family="binomial",data=shuttle)
fit
coef(fit)
coef(fit)[1]
exp(coef(fit)[1])
exp(coef(fit)[2])
exp(coef(fit)[1])/exp(coef(fit)[2])
fit2<-glm(autoland~factor(wind)+factor(magn)-1,family="binomial",data=shuttle)
fit2
exp(coef(fit)[1])/exp(coef(fit)[2])
fit2
exp(coef(fit2)[1])/exp(coef(fit2)[2])
fit
data(InsectSprays)
str(InsectSprays)
fit4 <- glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
(Coef4 <- coef(summary(fit4)))
exp(Coef4[1, 1])
exp(coef(fit4))[1]/exp(coef(fit4))[2]
exp(coef(fit4))[1]/
exp(coef(fit4))[1]/exp(coef(fit4))[2]
exp(coef(fit4))[1]
exp(coef(fit4))[2]
exp(coef(fit4))
exp(coef(fit4))[1]/(exp(coef(fit4))[1]+exp(coef(fit4))[2])
fit4 <- glm(count ~ factor(spray)-1, family = "poisson", data = InsectSprays)
exp(coef(fit4))[1]/(exp(coef(fit4))[1]+exp(coef(fit4))[2])
exp(coef(fit4))[1]/(exp(coef(fit4))[2])
fit4 <- glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
exp(coef(fit4))[1]/(exp(coef(fit4)[2]+coef(fit4)[1]))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
head(cars)
str(cars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
fit_linear <- lm(mpg ~ am, mtcars)
summary(fit_linear)
fit_all <- lm(mpg ~ . , mtcars)
summary(fit_all)
fit2 <- stepAIC(fit_all, direction="both", trace=FALSE)
summary(fit2)
anova(fit_linear, fit2)
summary(fit2)
head(cars)
str(cars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
fit_linear <- lm(mpg ~ am, mtcars)
summary(fit_linear)
fit_all <- lm(mpg ~ . , mtcars)
summary(fit_all)
fit2 <- stepAIC(fit_all, direction="both", trace=FALSE)
summary(fit2)
anova(fit_linear, fit2)
summary(fit2)
#Trend followin
#Nifty - Use 233 SMA breakout
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2007"]]<-c(1190/150)
securityrr_list[["2008"]]<-c(-81/110)
securityrr_list[["2009"]]<-c(400/800)
securityrr_list[["2010"]]<-c(556/188)
securityrr_list[["2011"]]<-c(-122/122,-105/105,-205/205)
securityrr_list[["2012"]]<-c(250/159)
securityrr_list[["2013"]]<-c(4/196,-80/292,-183/183,2070/230)
securityrr_list[["2015"]]<-c(-50/140)
securityrr_list[["2016"]]<-c(-118/260)
securityrr_list[["2017"]]<-c(-3792/180)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
securityrr_list[["2017"]]<-c(3792/180)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+0.02*securityrr)
cumprod(1+.12*securityrr)
cumprod(1+.05*securityrr)
cumprod(1+.1*securityrr)
cumprod(1+.05*securityrr)
0.26
0.09
perlot<-180*75*10^-5/0.02
perlot
margin<-0.6
margin/perlot
perlot<-180*75*10^-5/0.05
perlot
margin<-0.6
margin/perlot
perlot*1000
perlot<-180*75*10^-5/0.02
perlot
margin<-0.6
margin/perlot
perlot*1000
cumprod(1+.05*securityrr)
3.92^(1/11)
cumprod(1+.05*securityrr)
cumprod(1+.02*securityrr)
1.92^(1/11)
cumprod(1+.05*securityrr)
perlot<-180*75*10^-5/0.05
perlot
margin<-0.6
margin/perlot
cumprod(1+.02*securityrr)
1.92^(1/11)
0.26
0.09
perlot<-180*75*10^-5/0.02
perlot
margin/perlot
securityrr_list[["2016"]]<-c(99/394,107/305,120/665,-90/336,60/345,270/400,25/200,28/230,-220/650)
securityrr_list[["2017"]]<-c(750/325)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
#Swing
#Nifty - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(99/394,107/305,120/665,-90/336,60/345,270/400,25/200,28/230,-220/650)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
#Swing
#Nifty - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(99/394,107/305,120/665,-90/336,60/345,270/400,25/200,28/230,-220/650)
securityrr_list[["2017"]]<-c(750/325)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
#Swing
#Nifty - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(99/394,107/305,120/665,-90/336,60/345,270/400,25/200,28/230,-220/650)
securityrr_list[["2017"]]<-c(750/325,120/230,250/290,-60/260,-230/420,266/370,-180/320,517/390)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
#Nifty
securitytradeday<-c()
securityrisk<-c(160,130,110,130,150)
securityret<-c(450,108,-80,-110,700)
cumprod(1+0.02*(securityret-1)/securityrisk)
#Swing
#Nifty - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(99/394,107/305,120/665,-90/336,60/345,270/400,25/200,28/230,-220/650)
securityrr_list[["2017"]]<-c(750/325,120/230,250/290,-60/260,-230/420,266/370,-180/320,517/390)
securityrr_list[["2018"]]<-c(-20/405,250/350,-150/250,-240/450,577/202)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
#Swing
#Nifty - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2018"]]<-c(-20/405,250/350,-150/250,-240/450,577/202)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
#Nifty
securitytradeday<-c()
securityrisk<-c(160,130,110,130,150)
securityret<-c(450,108,-80,-110,700)
cumprod(1+0.02*(securityret-1)/securityrisk)
perlot<-quantile(securityrisk,0.50)*75*10^-5/0.02
#Swing
#Nifty - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2018"]]<-c(-20/405,250/350,-150/250,-240/450,577/202)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+.02*securityrr)
securityrr_list[["2018"]]<-c(209/130,-60/150,-20/157,-150/180,-180/203,-80/186,496/291,3/195,106/228,-152/256,-201/230)
#Swing
#Crude - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2018"]]<-c(209/130,-60/150,-20/157,-150/180,-180/203,-80/186,496/291,3/195,106/228,-152/256,-201/230)
cumprod(1+0.02*securityrr)
#Swing
#Crude - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2018"]]<-c(209/130,-60/150,-20/157,-150/180,-180/203,-80/186,496/291,3/195,106/228,-152/256,-201/230)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+0.02*securityrr)
#Swing
#Crude - Use 8 EMA breakout, 34 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2018"]]<-c(209/130,-60/150,-20/157,-150/180,-180/203,-80/186,496/291,3/195,106/228,-152/256,-201/230)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
securityrr_list[["2018"]]<-c(1715/85)
#Swing
#Crude - Use 34 EMA breakout, 144 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR or whichever nearer
#exit on whichever is getting broken
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2018"]]<-c(1715/85)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+0.02*securityrr)
securityrr_list[["2016"]]<-c(-100/239,53/225,48/194,19/170,-195/195,-30/288)
#Swing
#Crude - Use 34 EMA breakout, 144 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR or whichever nearer
#exit on whichever is getting broken
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(-100/239,53/225,48/194,19/170,-195/195,-30/288)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+0.02*securityrr)
#Swing
#Crude - Use 34 EMA breakout, 144 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR or whichever nearer
#exit on whichever is getting broken
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(-100/239,53/225,48/194,19/170,-195/195,-30/288)
securityrr_list[["2017"]]<-c(130/130,1720/155)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
cumprod(1+0.02*securityrr)
cumprod(1+0.02*securityrr)
0.22/3
0.22/3
plot(cumprod(1+0.02*securityrr),type="o")
securityrr_list[["2016"]]<-c(-7/12,-2/5,-7/10.3,-4/12)
#Swing
#Copper - Use 34 EMA breakout, 144 SMA plus trail using PSAR instead of ATR
#Do not enter if price below PSAR
#entry SL should be 2 ATR or so and not based on PSAR or whichever nearer
#exit on whichever is getting broken
#securitytradeday<-c()
#securityrisk<-c(24,22,30)
#securityret<-c(-16,9,7)
securityrr_list<-list()
securityrr_list[["2016"]]<-c(-7/12,-2/5,-7/10.3,-4/12)
securityrr<-Reduce(function(a,b) c(a,b),securityrr_list)
securityrr
securityrr
cumprod(1+0.02*securityrr)
library(datasets)
data(airquality)
summary(airquality)
setwd("~/GitHub/RepData_PeerAssessment1")
sampledata<-read.csv("./activity/activity.csv")
head(sampledata)
tail(sampledata)
summary(sampledata)
names(sampledata)
sampledata<-read.csv("./activity/activity.csv")
head(sampledata)
tail(sampledata)
summary(sampledata)
names(sampledata)
sampledata<-fread("./activity/activity.csv")
library(data.table)
sampledata<-fread("./activity/activity.csv")
head(sampledata)
tail(sampledata)
summary(sampledata)
names(sampledata)
sampledata[,.(steps)]
library(data.table)
sampledata<-fread("./activity/activity.csv")
head(sampledata)
tail(sampledata)
summary(sampledata)
names(sampledata)
#Date is a character and should be converted to date
#lubridate function can be used for it
library(lubridate)
sampledata[,date:=ymd(date)]
sampledata[,sum(steps),by=date]
sampledata[,sum(steps,na.rm = TRUE),by=date]
library(data.table)
sampledata<-fread("./activity/activity.csv")
head(sampledata)
tail(sampledata)
summary(sampledata)
names(sampledata)
#Date is a character and should be converted to date
#lubridate function can be used for it
library(lubridate)
sampledata[,date:=ymd(date)]
sampledata[,hist(sum(steps,na.rm = TRUE)),by=date]
meanstepsperday<-sampledata[,sum(steps,na.rm = TRUE),by=date]
library(data.table)
activitydata<-fread("./activity/activity.csv")
head(activitydata)
tail(activitydata)
summary(activitydata)
names(activitydata)
#Date is a character and should be converted to date
#lubridate function can be used for it
library(lubridate)
activitydata[,date:=ymd(date)]
#add additional columns to indicate the day of the week
activitydata[,weekday:=weekdays(date)]
